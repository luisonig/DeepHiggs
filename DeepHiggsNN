#!/usr/bin/env python

# Import needed python packages:
import sys
import os
import re
import imp
import glob
import time
import subprocess
import argparse
import tensorflow as tf
import numpy as np

#import matplotlib.pyplot as plt
#from matplotlib  import rc

from src.rootdata import *
from src.plots import *
from src.util import *
from src.obsNN import *
from src.jetNN import *

# python 2.4 does not have any and all
try: any, all
except NameError:
    any = lambda x: reduce(lambda a,b: a or b, x)
    all = lambda x: reduce(lambda a,b: a and b, x)

###

def main(ip):

    # Store starting time:
    start_time = time.time()

    # Initialize can compile in ROOT:
    data = RootData(ip.multip, 1)

    # We want to handle Ctrl+C
    #sh = ROOT.TSignalHandler(ROOT.kSigInterrupt, False)
    #sh.Add()
    #sh.Connect("Notified()", "TROOT", ROOT.gROOT, "SetInterrupt()")

    #if ip.mode == 'training':
    gp=GlobalParameters()
    
    print "--> Load training data ..."
    
    if ip.analysis_type == 'obs':
        x_train, y_train, ggf_size, vbf_size = data.load_data_obs(ip, gp, 'train')

    elif ip.analysis_type == 'jets':
        x_train, y_train, ggf_size, vbf_size = data.load_data_jets(ip, gp, 'train')

    print(" Size of ggf training sample: %i events" % ggf_size)
    print(" Size of vbf training sample: %i events" % vbf_size)

    if ip.analysis_type == 'obs':
        if ip.makeplots and ip.multip == 2:
            make2dplot(ip, ["pth","ptj1","ptj2","mjj","dphijj","yj1","yj2","yjj","zstar","Rptjet","ME"], x_train, ggf_size, gp._num_examples)
        if ip.makeplots and ip.multip == 3:
            make2dplot(ip, ["pth","ptj1","ptj2","mjj","dphijj","yj1","yj2","yj3","yjj","zstar","Rptjet", "zstar3j", "ME"], x_train, ggf_size, gp._num_examples)
    
    x_train_norm = normalize_input(x_train)
    
    print "--> Load development data ..."

    if ip.analysis_type == 'obs':
        x_devel, y_devel, ggf_size, vbf_size = data.load_data_obs(ip, gp, 'devel')
    elif ip.analysis_type == 'jets':
        x_devel, y_devel, ggf_size, vbf_size = data.load_data_jets(ip, gp, 'devel')

    print(" Size of ggf develop sample: %i events" % ggf_size)
    print(" Size of vbf develop sample: %i events" % vbf_size)

    x_devel_norm = normalize_input(x_devel)
    
    if ip.analysis_type == 'obs':
        #y_final=train(gp, ip, x_train, y_train, x_devel, y_devel)
        y_final=train_obs(gp, ip, x_train_norm, y_train, x_devel_norm, y_devel)
    elif ip.analysis_type == 'jets':
        y_final=train_jet(gp, ip, x_train_norm, y_train, x_devel_norm, y_devel)

    if ip.analysis_type == 'obs':
        y_rewrite=[]
        proc_ind = tf.InteractiveSession().run(tf.argmax(y_final, 1))
        for i in range(len(proc_ind)):
            if proc_ind[i]==0:
                y_rewrite.append([1.,0.])
            else:
                y_rewrite.append([0.,1.0])

    #makeplot("ptH", pthlist_test, weights_test, ggf_size, y_rewrite)
    #makeplot("mj1j2", mjjlist_test, weights_test, ggf_size, y_rewrite)
    #makeplot("ptj1", ptj1list_test, weights_test, ggf_size, y_rewrite)
    #makeplot("yj1", yj1list_test, weights_test, ggf_size, y_rewrite)
    #makeplot("dphijj", dphijjlist_test, weights_test, ggf_size, y_rewrite)

    print "Run time: %d seconds" % (time.time() - start_time)

    sys.exit()
    

class InputParameters:

    def __init__(self):

        ## Argument parser

        parser = argparse.ArgumentParser(description='NLO NTuples machine learning tool.') #,formatter_class=argparse.ArgumentDefaultsHelpFormatter)
        #subparser = parser.add_subparsers(dest='MODE', help='Program running mode: training, evaluation')

        #parser_train = subparser.add_parser('training', help='training help (add this mode for more specific help)')
        parser.add_argument("-m", "--multip", dest="MULTIP", required=True,
                            help="Multiplicity of process to reweight: 2, 3")
        parser.add_argument("-e", "--events", dest="EVENTS", default=-1,
                            help="Number of events to be processed [all]")
        parser.add_argument("--debug",  dest="DEBUG", default=False, action='store_const', const=True,
                            help="Generate debug output [False]")
        parser.add_argument("-ggf_train", "--ggf_train", dest="GGFFILE_TRAIN", required=True,
                            help="Root Ntuple for training GGF")
        parser.add_argument("-vbf_train", "--vbf_train", dest="VBFFILE_TRAIN", required=True,
                            help="Root Ntuple for training VBF")
        parser.add_argument("-ggf_eval", "--ggf_eval", dest="GGFFILE_EVAL", required=True,
                            help="Root Ntuple for evaluating GGF")
        parser.add_argument("-vbf_eval", "--vbf_eval", dest="VBFFILE_EVAL", required=True,
                            help="Root Ntuple for evaluating VBF")
        parser.add_argument('--log_dir', type=str, dest='log_dir', default='/.th/pcl335a/scratch',
                            help='Summaries log directory')
        parser.add_argument('--run_dir', type=str, dest='run_dir', default='run1',
                            help='Log directory for single run')
        parser.add_argument('--dropout', type=float, dest="dropout", default=0.9,
                            help='Keep probability for training dropout.')
        parser.add_argument('--max_steps', type=int, dest="max_steps", default=3000,
                            help='Number of steps to run trainer.')
        parser.add_argument('--learning_rate', type=float, dest="learning_rate", default=0.0001,
                            help='Initial learning rate')
        parser.add_argument('--optimizer', type=str, dest="optimizer", default="Adam",
                            help='Optimizer to use, choice among: Adam, GraDe, Adagrad')
        parser.add_argument('--makeplots', action='store_true', dest="makeplots", default=False,
                            help='Whether to generate observables scatter plots')
        parser.add_argument('--analysis_type',  dest="analysis_type", default="obs",
                            help="If set to 'obs', high-level observables are used as input variables, if set to 'jets', the four-momenta of the jets are used as input variables")
    
        args                 = parser.parse_args()
        self.multip          = int(args.MULTIP)
        self.events          = args.EVENTS
        self.debug           = args.DEBUG
        self.GGFFILE_TRAIN   = args.GGFFILE_TRAIN
        self.VBFFILE_TRAIN   = args.VBFFILE_TRAIN
        self.GGFFILE_EVAL    = args.GGFFILE_EVAL
        self.VBFFILE_EVAL    = args.VBFFILE_EVAL
        self.log_dir         = args.log_dir
        self.run_dir         = args.run_dir
        self.dropout         = args.dropout
        self.max_steps       = args.max_steps
        self.learning_rate   = args.learning_rate
        self.optimizer       = args.optimizer
        self.makeplots       = args.makeplots
        self.analysis_type   = args.analysis_type

        try:
            value = int(self.multip)
        except ValueError:
            print "Multiplicity must be an integer: 2 or 3"
            sys.exit(2)


    def print_parameters(self):

        print "------------------------------"
        print "--    SETUP PARAMETERS      --"
        print "------------------------------"
        print ""
        print (" MODE: Higgs + {0} jet(s)".format( str(self.multip)))
        print ""
        #print " INPUT FILES:"
        #for i in self.filenames:
            #print " -", i
        #print ""
        #print " OUTPUT:"
        #if not self.outfolder:
            #print "   folder: not specified, use same as input-file folder"
        #else:
            #print "   folder: ", self.outfolder
        #if not self.outfile:
            #print "   suffix: ", self.suffix
        #else:
            #print "   file name: ", self.outfile
        #print ""
        #if self.events < 0:
            #print " EVENTS: all"
        #else:
            #print " EVENTS: ", self.events
        #print ""


if __name__ == '__main__':

    input_parameters = InputParameters()
    input_parameters.print_parameters()

    main(input_parameters)
